is_array($value) && (function (&$items) use (&$invalidTuples) {
    {% if generatorConfiguration.collectErrors() %}
        $originalErrorRegistry = $this->errorRegistry;
    {% endif %}

    $index = 0;
    {% foreach tupleProperties as tuple %}
        // ---------------- validate a single tuple of the array ------------------
        try {
            if ($index === count($items)) {
                return !empty($invalidTuples);
            }

            {% if generatorConfiguration.collectErrors() %}
                $this->errorRegistry = new {{ viewHelper.getSimpleClassName(generatorConfiguration.getErrorRegistryClass()) }}();
            {% endif %}

            $value = &$items[$index++];
            {{ viewHelper.resolvePropertyDecorator(tuple) }}

            {% foreach tuple.getOrderedValidators() as validator %}
                {{ validator.getValidatorSetUp() }}
                if ({{ validator.getCheck() }}) {
                    {{ viewHelper.validationError(validator) }}
                }
            {% endforeach %}

            {% if generatorConfiguration.collectErrors() %}
                if ($this->errorRegistry->getErrors()) {
                    $invalidTuples[$index] = $this->errorRegistry->getErrors();
                }
            {% endif %}
        } catch (\Exception $e) {
            // collect all errors concerning invalid tuples
            isset($invalidTuples[$index])
                ? $invalidTuples[$index][] = $e
                : $invalidTuples[$index] = [$e];
        }
    {% endforeach %}

    {% if generatorConfiguration.collectErrors() %}
        $this->errorRegistry = $originalErrorRegistry;
    {% endif %}

    return !empty($invalidTuples);
})($value)